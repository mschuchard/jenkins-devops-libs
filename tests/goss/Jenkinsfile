// for dynamic retrieval
library identifier: 'jenkins-devops-libs@master', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'https://github.com/mschuchard/jenkins-devops-libs.git'])
// if added in Jenkins global config shared libraries
//@Library('jenkins-devops-libs')_
// if added in Jenkins global config shared libraries and the github api plugin is bugging out and slamming github with requests
//library('jenkins-devops-libs')_

pipeline {
  agent { docker { image 'aelsabbahy/goss:v0.3.16' } }

  stages {
    stage('Validate GoSSfile') {
      steps {
        sh 'curl -L https://raw.githubusercontent.com/mschuchard/jenkins-devops-libs/master/tests/goss/goss.yaml -o /tmp/goss.yaml'

        script {
          goss.validateGossfile('/tmp/goss.yaml')
        }
      }
    }
    // this may fail due to missing directive
    stage('Render GoSSfile') {
      steps {
        script {
          goss.render(
            debug:    true, // optional print rendered golang template prior to gossfile
            gossfile: '/tmp/goss.yaml', // optional location of gossfile with included directive
          )
        }
      }
    }
    stage('Validate Server') {
      steps {
        script {
          goss.validate(gossfile: '/tmp/goss.yaml') // optional location of gossfile
        }
      }
    }
    stage('Create Endpoint') {
      steps {
        script {
          goss.server(
            gossfile: '/tmp/goss.yaml', // optional location of gossfile
            format:   'documentation', // optional formatter to use for output
          )
        }
      }
    }
    stage('Validate Docker Image') {
      // switch to dgoss agent here
      environment {
        GOSS_FILES_PATH     = '/tmp/'
        GOSS_FILES_STRATEGY = 'mount'
      }
      steps {
        script {
          goss.validateDocker(
            flags: ['JAVA_OPTS="-Xmx1048m"'], // optional flags for container run
            image: 'alpine:latest' // docker image to run container from
          )
        }
      }
    }
  }
}
