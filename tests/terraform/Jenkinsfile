// for dynamic retrieval
library identifier: 'jenkins-devops-libs@master', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'https://github.com/mschuchard/jenkins-devops-libs.git'])
// if added in Jenkins global config shared libraries
//@Library('jenkins-devops-libs')_
// if added in Jenkins global config shared libraries and the github api plugin is bugging out and slamming github with requests
//library('jenkins-devops-libs')_

pipeline {
  agent { docker { image 'hashicorp/terraform:1.10' } }

  stages {
    stage('Initialize') {
      steps {
        sh 'curl -L https://raw.githubusercontent.com/mschuchard/jenkins-devops-libs/master/tests/terraform/main.tf -o /tmp/main.tf'

        script {
          dir('/tmp') {
            terraform.init()
          }
        }
      }
    }
    stage('Parse') {
      steps {
        script {
          parsedMap = terraform.parse('/tmp/main.tf')
        }
      }
    }
    stage('Providers') {
      steps {
        script {
          terraform.providers('/tmp')
        }
      }
    }
    stage('Workspace') {
      steps {
        script {
          terraform.workspace(
            dir:       '/tmp',
            workspace: 'default'
          )
        }
      }
    }
    stage('Validate') {
      steps {
        script {
          terraform.validate(
            dir:  '/tmp',
            json: true
          )
        }
      }
    }
    stage('Fmt') {
      steps {
        script {
          terraform.fmt(
            dir:   '/tmp',
            check: true,
            diff:  true
          )
        }
      }
    }
    stage('Plan') {
      steps {
        script {
          terraform.plan(dir: '/tmp')
        }
      }
    }
    stage('Graph') {
      steps {
        script {
          terraform.graph(plan: '/tmp/plan.tfplan')
        }
      }
    }
    stage('Apply') {
      steps {
        script {
          terraform.apply(configPath: '/tmp/plan.tfplan')
        }
      }
    }
    stage('Output') {
      steps {
        script {
          terraform.output(json: false)
        }
      }
    }
    stage('Refresh') {
      steps {
        script {
          terraform.refresh(dir: '/tmp')
        }
      }
    }
    stage('State') {
      steps {
        script {
          terraform.state(
            command:   'move',
            resources: ['local_file.file':'local_file.not_file']
          )
        }
      }
    }
    stage('Destroy') {
      steps {
        script {
          terraform.destroy(configPath: '/tmp')
        }
      }
    }
    stage('Test') {
      steps {
        script {
          print 'This will fail at runtime, but should succeed during compilation.'
          terraform.test(dir: '/tmp')
        }
      }
    }
  }
}
